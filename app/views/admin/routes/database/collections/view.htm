 
<div class="position-relative mb-4">
    <check if="{{ isset(@notfound) }}">
        <true>
            <div class="w-100 my-4">
                <h1>Not found</h1>
                <p class="text-body-secondary">Collection <span class="fw-bolder">{{isset(@GET.view)?@GET.view:''}}</span> was not found in our records.</p>
            </div>
        </true>
        <false>
            <div class="modal fade" id="editEntryModal" tabindex="-1" aria-labelledby="editEntryModalLabel" aria-hidden="true" style="display: none;">
                <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="editEntryModalLabel">Edit Entry</h5>
                            <button class="btn-close" type="button" data-ui-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <form id="editEntryForm">
                            <div class="modal-body">
                                <input type="hidden" id="editEntryId" name="id" value="">
                                <repeat group="{{@collection.fields}}" value="{{@field}}">
                                    <div class="d-flex bg-body flex-column mb-4">
                                        <label for="editEntry-{{@field.name}}" class="mb-2 fw-bolder">{{@field.name}}</label>
                                        <input class="form-control" type="{{@field.type=='INTEGER'?'number':'text'}}" id="editEntry-{{@field.name}}" name="{{@field.name}}" value="{{@field.default}}" placeholder="{{@field.default}}" {{@field.notnull==0?'':'required'}}>
                                    </div>
                                </repeat>
                            </div>
                            <div class="modal-footer">
                                <button class="btn btn-secondary" type="button" data-ui-dismiss="modal" id="editEntryExit">Cancel</button>
                                <button class="btn btn-danger" type="button" id="deleteEntryBtn">Delete Entry</button>
                                <button class="btn btn-primary" type="submit">Save changes</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
            <div class="modal fade" id="newEntryModal" tabindex="-1" aria-labelledby="newEntryModalLabel" aria-hidden="true" style="display: none;">
                <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
                  <div class="modal-content">
                    <div class="modal-header">
                      <h5 class="modal-title" id="newEntryModalLabel">New Entry</h5>
                      <button class="btn-close" type="button" data-ui-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <form id="newEntyForm">
                    <div class="modal-body">
                      <repeat group="{{@collection.fields}}" value="{{@field}}">
                        <div class="d-flex bg-body flex-column mb-4">
                        <label for="newEntry-{{@field.name}}" class="mb-2 fw-bolder">{{@field.name}}</label>
                        <input class="form-control" type="{{@field.type=='INTEGER'?'number':'text'}}" id="newEntry-{{@field.name}}" name="{{@field.name}}" value="{{@field.default}}" placeholder="{{@field.default}}" {{@field.notnull==0?'':'required'}}>
                        </div>
                      </repeat>  
                    </div>
                    <div class="modal-footer">
                      <button class="btn btn-secondary" type="button" data-ui-dismiss="modal" id="newEntryExit">Cancel</button>
                      <button class="btn btn-primary" type="submit">Save changes</button>
                    </div>
                  </form>
                  </div>
                </div>
            </div>
            <div class="modal fade" id="fieldsModal" tabindex="-1" aria-labelledby="fieldsModalLabel" aria-hidden="true" style="display: none;">
              <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
                <div class="modal-content">
                  <div class="modal-header">
                    <h5 class="modal-title" id="fieldsModalLabel">Data Fields</h5>
                    <button class="btn-close" type="button" data-ui-dismiss="modal" aria-label="Close"></button>
                  </div>
                    <form id="editFieldsForm">
                        <div id="fieldsContainer">
                            <repeat group="{{@collection.fields}}" value="{{@field}}">
                                <p>{{@field.name}} ( {{@field.type}} )</p>
                                <div class="field-row" data-original-name="{{@field.name}}">
                                    <input type="text" name="field_name[]" value="{{@field.name}}" placeholder="Field name" required />
                                    <select name="field_type[]">
                                        <option value="TEXT">TEXT</option>
                                        <option value="INTEGER">INTEGER</option>
                                    </select>
                                    <button type="button" class="btn-remove-field">Remove</button>
                                </div>
                            </repeat>
                        </div>
                        <button type="button" id="addNewField" class="btn btn-secondary">+ Add New Field</button>
                        <button type="submit" class="btn btn-primary">Save changes</button>
                    </form>
                </div>
              </div>
          </div>
            <div class="modal fade" id="backupModal" tabindex="-1" aria-labelledby="backupModalLabel" aria-hidden="true" style="display: none;">
                <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="backupModalLabel">Import / Export Collection</h5>
                            <button class="btn-close" type="button" data-ui-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <!-- Export Section -->
                            <div class="mb-4">
                                <h6 class="fw-bold mb-3">Export Collection</h6>
                                <p>Download this collection as a JSON file that you can backup or import later.</p>
                                <div class="d-grid gap-2">
                                    <a href="/{{@SITE.uri_backend}}/database/collections?export-collection&collection={{@collection.name}}&tkn={{@TOKEN}}"
                                       class="btn btn-primary"
                                       download="{{@collection.name}}_export_{{date('Y-m-d')}}.json">
                                        <svg class="icon">
                                            <use xlink:href="/public/assets/icons/svg/free.svg#cil-data-transfer-down"></use>
                                        </svg>
                                        Export Collection
                                    </a>
                                </div>
                            </div>

                            <!-- Import Section -->
                            <div>
                                <h6 class="fw-bold mb-3">Import Collection</h6>
                                <p>Import a previously exported collection file.</p>
                                <form id="importForm" enctype="multipart/form-data">
                                    <div class="mb-3">
                                        <label for="import_file" class="form-label">Select JSON file</label>
                                        <input class="form-control" type="file" id="import_file" name="import_file" accept=".json">
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Import Strategy</label>
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="import_strategy" id="strategy_replace" value="replace" checked>
                                            <label class="form-check-label" for="strategy_replace">
                                                Replace (Delete existing collection and replace with imported data)
                                            </label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="import_strategy" id="strategy_append" value="append">
                                            <label class="form-check-label" for="strategy_append">
                                                Append (Keep existing collection and add imported data)
                                            </label>
                                        </div>
                                    </div>
                                    <input type="hidden" name="token" value="{{@SESSION.token}}">
                                    <div class="d-grid gap-2">
                                        <button type="submit" class="btn btn-success">
                                            <svg class="icon">
                                                <use xlink:href="/public/assets/icons/svg/free.svg#cil-data-transfer-up"></use>
                                            </svg>
                                            Import Collection
                                        </button>
                                    </div>
                                </form>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <div class="col">
                                <div class="d-flex flex-column gap-1">
                                    <span class="text-body-secondary">Entries: {{@collection.dataCount}}</span>
                                    <span class="text-body-secondary">Data Fields: {{@collection.fieldsCount}}</span>
                                </div>
                            </div>
                            <div class="col text-end">
                                <button class="btn btn-secondary" type="button" data-ui-dismiss="modal">Close</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal fade" id="renameModal" tabindex="-1" aria-labelledby="renameModalLabel" aria-hidden="true" style="display: none;">
                <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="renameModalLabel">Rename Collection</h5>
                            <button class="btn-close" type="button" data-ui-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <form id="renameForm">
                            <div class="modal-body">
                                <div class="mb-3">
                                    <label for="newTableName" class="form-label">New Table Name</label>
                                    <input type="text" class="form-control" id="newTableName" name="new_table_name" value="{{@collection.name}}" placeholder="Enter new table name" required>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button class="btn btn-secondary" type="button" data-ui-dismiss="modal">Cancel</button>
                                <button class="btn btn-primary" type="submit">Save changes</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true" style="display: none;">
                <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="deleteModalLabel">Are you sure?</h5>
                            <button class="btn-close" type="button" data-ui-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <p>Warning: This will permanently delete the table!</p>
                        </div>
                        <div class="modal-footer">
                            <button class="btn btn-secondary" type="button" data-ui-dismiss="modal">Cancel</button>
                            <button class="btn btn-danger" id="confirmDeleteBtn" type="button">Yes, delete it</button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="w-100 mb-4">
                <div class="d-flex justify-content-between align-items-center"> 
                    <h1>{{@collection.name}}</h1>
                    <div class="ms-auto">
                        <a role="button" class="btn bg-color border" aria-label="New Entry" data-ui-toggle="modal" data-ui-target="#newEntryModal">+ New Entry</a>  
                    </div> 
                </div>
            </div>

            <div class="card mb-4">   
                <div class="card-header"> 
                  <div class="d-flex justify-content-between"> 
                    <span>Entries: {{ @collection.dataCount }} found</span> 
                  </div>
                </div>
                <div class="card-body pb-0">
                  <div class="table-responsive">
                    <table class="table table-hover m-0">
                        <thead>
                          <tr> 
                            <repeat group="{{@collection.fields}}" value="{{@field}}">
                                <th scope="col">{{@field.name}}</th>
                            </repeat> 
                            <th scope="col" class="text-end">Actions</th>
                          </tr>
                        </thead>
                        <tbody>
                            <check if="{{@collection.data}}"> 
                                <repeat group="{{@collection.data}}" value="{{@data}}" key="{{@key}}">
                                <tr>  
                                  <repeat group="{{@collection.fields}}" value="{{@field}}">
                                    <td data-field="{{@field.name}}">
                                      {{ !empty(@data[@field.name]) ? stripslashes(@data[@field.name]) : '' }}
                                    </td>  
                                  </repeat>
                                    <td class="text-end pe-0">
                                      <div class="inline-flex"> 
                                        <button data-ui-toggle="modal" data-ui-target="#editEntryModal" class="btn-edit inline-flex align-items-center gap-1 btn btn-sm btn-outline-secondary" aria-label="Edit" href="/{{@SITE.uri_backend}}/database/collections?view={{@collection.name}}">
                                          <svg class="icon icon-sm">
                                            <use xlink:href="/public/assets/icons/svg/free.svg#cil-pencil"></use>
                                          </svg> 
                                          Edit
                                          </button>
                                      </div>
                                    </td>
                                </tr> 
                                </repeat>
                            </check>  
                        </tbody>
                      </table>
                  </div>
                </div> 
            </div>
            <div class="w-100 py-4 position-relative">
                <div class="row row-cols-1 row-cols-md-2">

                    <div class="col mb-4">
                        <div class="card">
                            <div class="card-header"> 
                                <div class="d-flex justify-content-between"> 
                                  <span>Data Fields</span> 
                                  <a role="button" class="btn btn-sm text-primary p-0" aria-label="Edit Data Fields" data-ui-toggle="modal" data-ui-target="#fieldsModal"> 
                                    Add / Remove
                                  </a>
                                </div>
                              </div>
                              <div class="card-body">
                                <check if="{{ @collection.fieldsCount > 0 }}">
                                  <true>
                                    <div class="table-responsive"> 
                                    <table class="table table-hover m-0">
                                      <thead>
                                      <tr> 
                                          <th scope="col">Name</th>  
                                          <th scope="col">Type</th>  
                                          <th scope="col">Default</th>  
                                          <th scope="col">Is Null</th> 
                                          <th scope="col">Key</th>  
                                      </tr>
                                      </thead>
                                      <tbody>
                                          <repeat group="{{@collection.fields}}" value="{{@field}}"> 
                                            <tr>   
                                                <td>{{@field.name}}</td> 
                                                <td>{{@field.type}}</td>  
                                                <td>{{@field.default}}</td> 
                                                <td>{{@field.notnull==0?'FALSE':'TRUE'}}</td> 
                                                <td>{{@field.key==0?'':'🔑'}}</td> 
                                            </tr> 
                                          </repeat>  
                                      </tbody>
                                    </table> 
                                    </div>
                                  </true>
                                  <false>
                                    <p>Data fields empty.</p>
                                  </false>
                                </check>
                               
                              </div> 
                        </div>
                    </div>
                    <div class="col mb-4">
                        <div class="card">
                            <div class="card-header"> 
                                <div class="d-flex justify-content-between"> 
                                  <span>Manage Collection</span> 
                                </div>
                              </div>
                              <div class="card-body">
                                <div class="d-flex flex-wrap gap-2">
                                    <a role="button" class="btn btn-secondary" aria-label="Save Backup" data-ui-toggle="modal" data-ui-target="#backupModal">
                                        <svg class="icon">
                                            <use xlink:href="/public/assets/icons/svg/free.svg#cil-data-transfer-down"></use>
                                        </svg>
                                        Import / Export
                                    </a>
                                    <a role="button" class="btn btn-info" aria-label="Rename Collection" data-ui-toggle="modal" data-ui-target="#renameModal">
                                      <svg class="icon">
                                          <use xlink:href="/public/assets/icons/svg/free.svg#cil-pencil"></use>
                                      </svg>
                                      Rename Collection
                                  </a>
                                    <a role="button" class="btn btn-danger" aria-label="Delete Collection" data-ui-toggle="modal" data-ui-target="#deleteModal">
                                        <svg class="icon">
                                            <use xlink:href="/public/assets/icons/svg/free.svg#cil-trash"></use>
                                        </svg>
                                        Delete Collection
                                    </a>
                                </div>
                              </div> 
                        </div>
                    </div>
                </div>
            </div>

            <div class="w-100 pt-2 position-relative">
              <div class="accordion" id="devBlock">
                <div class="accordion-item">
                  <h2 class="accordion-header" id="devConsoleTitle">
                    <button class="accordion-button collapsed gap-2" type="button" data-ui-toggle="collapse" data-ui-target="#devConsole" aria-expanded="false" aria-controls="devConsole">
                      <svg class="icon">
                        <use xlink:href="{{@PUBLIC}}/assets/icons/svg/free.svg#cil-code"></use>
                    </svg>
                    Developer Mode
                    </button>
                  </h2>
                  <div class="accordion-collapse collapse" id="devConsole" aria-labelledby="devConsoleTitle" data-ui-parent="#devBlock" style="">
                    <div class="accordion-body">
                      <div class="d-flex flex-wrap gap-2">
                        <div class="input-group mb-2">
                          <span class="input-group-text p-0">
                            <select class="form-select" aria-label="HTTP Request" id="devReqType" name="devReqType"> 
                              <option value="GET" selected="">GET</option>
                              <option value="POST">POST</option> 
                              <option value="PUT">PUT</option> 
                              <option value="DELETE">DELETE</option> 
                            </select> 
                          </span>
                          <input class="form-control" type="text" id="devReqUri" name="devReqUri" placeholder="URI" value="{{ @API.base_url .'/'. @collection.name }}" readonly disabled>
                        </div>
                
                        <!-- Radio buttons for Node.js and cURL -->
                        <div class="mb-3">
                          <label class="form-label">Library:</label>
                          <div>
                            <input type="radio" id="nodeRadio" name="reqMethod" value="node" checked>
                            <label for="nodeRadio">Node.js (Fetch API)</label>
                          </div>
                          <div>
                            <input type="radio" id="curlRadio" name="reqMethod" value="curl">
                            <label for="curlRadio">cURL</label>
                          </div>
                        </div>
                
                        <div class="input-group mb-4"> 
                          <textarea rows="10" cols="250" class="form-control" id="devReqParams" name="devReqParams" aria-label="PARAMS" readonly></textarea>
                        </div>
                      </div>
                    </div>
                  </div>
                </div> 
              </div> 
            </div>



            <input type="hidden" id="tbl_name" name="tbl_name" value="{{@collection.name}}">
            <input type="hidden" id="token" name="token" value="{{@TOKEN}}">
        </false>
    </check> 

</div>

<script>
  "use strict"

  const newEntyForm = document.getElementById('newEntyForm'); 
  const token = document.querySelector('#token'); 
  const tableNameInput = document.querySelector("#tbl_name"); 


  //
  if(newEntyForm){
    newEntyForm.addEventListener('submit', function(e){
    e.preventDefault();
    const formData = new FormData(newEntyForm);
    const schema = {};
    formData.forEach((value, key) => {
      schema[key] = value;  // Dynamically adds field name and value
    });
    
    const payload = {
      token: token.value,
      collection: tableNameInput.value,
      schema: schema,  // Now contains all the form inputs
    }

    let uri_request = "database/collections?add-entry";
    fetchRequest(payload, uri_request);
  });

  }

    // Add Event Listeners
    async function fetchRequest(formData, url){
      event.preventDefault();  
      hideAlerts();

      try {
        const response = await axios.post("/{{@SITE.uri_backend}}/"+url, formData, {
          headers: {
              "Content-Type": "application/json", 
          },
        }).then(response => {  
          const data = response.data;
          if (data.status === "success") {  
            alert(response.data.message);
            window.location.reload();
            return false;
          } else {
              showAlert("error", response.data.message);
          }
        }).finally(() => {
           let hideEntryModal = document.getElementById('newEntryExit');
           if(hideEntryModal){hideEntryModal.click()};
        });

      } catch (error) {
          showAlert("error", "Error creating table. Please try again later.");
      }

    }

   document.addEventListener('DOMContentLoaded', () => {


   const editButtons = document.querySelectorAll('.btn-edit');
   editButtons.forEach(button => {
       button.addEventListener('click', function(e) {
           const fieldsString = '{{json_encode(@collection.fields)}}';

           let fields;

           try {
               fields = JSON.parse(fieldsString);
           } catch (error) {
               console.error("Failed to parse fields:", error);
           }
           const row = this.closest('tr'); // Get the closest row
           const id = row.querySelector('td:first-child').textContent; // Assuming the first cell contains the ID
           document.getElementById('editEntryId').value = id; // Set the ID in the hidden input

           // Populate the fields with current values
           fields.forEach(field => {
               const input = document.getElementById(`editEntry-${field.name}`);
               if (input) {
                   // Use data attributes to get the current value
                   const currentValue = row.querySelector(`td[data-field="${field.name}"]`).textContent;
                   input.value = currentValue; // Set the input value
               }
           });

       });
   });

    const devReqType = document.getElementById('devReqType');
    const devReqParams = document.getElementById('devReqParams');
    const devReqUri = document.getElementById('devReqUri');
    const reqMethodRadios = document.querySelectorAll('input[name="reqMethod"]');

       const fetchExamples = (method, uri) => {
           const templates = {
               GET: `fetch('${uri}', {
    method: 'GET',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer your-api-key'
    }
})
.then(response => response.json())
.then(data => console.log(data))
.catch(error => console.error('Error:', error));`,
               POST: `fetch('${uri}', {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer your-api-key'
    },
    body: JSON.stringify({
        key: 'value',
        anotherKey: 'anotherValue'
    })
})
.then(response => response.json())
.then(data => console.log(data))
.catch(error => console.error('Error:', error));`,
               PUT: `fetch('${uri}/id/1', { // Replace '1' with the actual ID you want to update
    method: 'PUT',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer your-api-key'
    },
    body: JSON.stringify({
        key: 'updatedValue'
    })
})
.then(response => response.json())
.then(data => console.log(data))
.catch(error => console.error('Error:', error));`,
               DELETE: `fetch('${uri}/id/1', { // Replace '1' with the actual ID you want to delete
    method: 'DELETE',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer your-api-key'
    }
})
.then(response => response.json())
.then(data => console.log(data))
.catch(error => console.error('Error:', error));`
           };
           return templates[method];
       };

       const curlExamples = (method, uri) => {
           const templates = {
               GET: `curl -X GET "${uri}" -H "Content-Type: application/json" -H "Authorization: Bearer your-api-key"`,
               POST: `curl -X POST "${uri}" -H "Content-Type: application/json" -H "Authorization: Bearer your-api-key" -d '{"key": "value", "anotherKey": "anotherValue"}'`,
               PUT: `curl -X PUT "${uri}/id/1" -H "Content-Type: application/json" -H "Authorization: Bearer your-api-key" -d '{"key": "updatedValue"}'`, // Replace '1' with the actual ID
               DELETE: `curl -X DELETE "${uri}/id/1" -H "Content-Type: application/json" -H "Authorization: Bearer your-api-key"` // Replace '1' with the actual ID
           };
           return templates[method];
   };

    const updateTextarea = () => {
        const selectedMethod = devReqType.value;
        const uri = devReqUri.value;
        const selectedReqMethod = document.querySelector('input[name="reqMethod"]:checked').value;

        let example;
        if (selectedReqMethod === 'node') {
            example = fetchExamples(selectedMethod, uri); // Use fetch examples for Node.js
        } else if (selectedReqMethod === 'curl') {
            example = curlExamples(selectedMethod, uri); // Use cURL examples
        }

        devReqParams.value = example;
    };

    // Set default to GET example using the URI from devReqUri
    updateTextarea();

    // Update textarea based on selected method and URI
    devReqType.addEventListener('change', updateTextarea);
    reqMethodRadios.forEach(radio => {
        radio.addEventListener('change', updateTextarea);
    });
});

  // Event listener for edit form submission
  const editEntryForm = document.getElementById('editEntryForm');
  if (editEntryForm) {
      editEntryForm.addEventListener('submit', function(e) {
          e.preventDefault();

          // Get form data
          const formData = new FormData(editEntryForm);
          const schema = {};
          formData.forEach((value, key) => {
              schema[key] = value;  // Dynamically adds field name and value
          });

          // Create payload with token, collection name, and data schema
          const payload = {
              token: token.value,
              collection: tableNameInput.value,
              id: document.getElementById('editEntryId').value, // ID of the entry to update
              schema: schema  // Contains all form inputs
          };

          // Send request to update endpoint
          let uri_request = "database/collections?update-entry";
          updateEntry(payload, uri_request);
      });
  }

  const deleteEntryBtn = document.getElementById('deleteEntryBtn');

  if (deleteEntryBtn) {
      deleteEntryBtn.addEventListener('click', function() {
          // Get the entry ID from the hidden input field
          const entryId = document.getElementById('editEntryId').value;
          const tableName = document.getElementById('tbl_name').value;

          // Show confirmation dialog
          if (window.confirm('Are you sure you want to delete this entry? This action cannot be undone.')) {
              // Create payload for delete request
              const payload = {
                  token: document.getElementById('token').value,
                  collection: tableName,
                  id: entryId
              };

              // Send delete request
              deleteEntry(payload);
          }
      });
  }

  // Function to send delete request to server
  async function deleteEntry(payload) {
      hideAlerts();

      try {
          const response = await axios.post(`/{{@SITE.uri_backend}}/database/collections?delete-entry`, payload, {
              headers: {
                  "Content-Type": "application/json",
              }
          });

          const data = response.data;
          if (data.status === "success") {
              alert(data.message);
              window.location.reload();
          } else {
              showAlert("error", data.message);
          }
      } catch (error) {
          showAlert("error", "Error deleting entry. Please try again later.");
          console.error("Error deleting entry:", error);
      } finally {
          // Close the modal
          let hideEntryModal = document.getElementById('editEntryExit');
          if (hideEntryModal) { hideEntryModal.click(); }
      }
  }

  // Function to send update request to server
  async function updateEntry(formData, url) {
      event.preventDefault();
      hideAlerts();

      try {
          const response = await axios.post("/{{@SITE.uri_backend}}/" + url, formData, {
              headers: {
                  "Content-Type": "application/json",
              },
          }).then(response => {
              const data = response.data;
              if (data.status === "success") {
                  alert(response.data.message);
                  window.location.reload();
                  return false;
              } else {
                  showAlert("error", response.data.message);
              }
          }).finally(() => {
              let hideEntryModal = document.getElementById('editEntryExit');
              if (hideEntryModal) { hideEntryModal.click(); }
          });

      } catch (error) {
          showAlert("error", "Error updating entry. Please try again later.");
      }
  }

  // Handle dynamic field removal
  document.addEventListener('click', function(e) {
      if (e.target.classList.contains('btn-remove-field')) {
          e.preventDefault();
          e.target.closest('.field-row').remove();
      }
  });

  // Submit edited fields
  const editFieldsForm = document.getElementById('editFieldsForm');
  if (editFieldsForm) {
      editFieldsForm.addEventListener('submit', async function(e) {
          e.preventDefault();
          const rows = document.querySelectorAll('.field-row');
          const fields = [];
          rows.forEach(row => {
              const original = row.dataset.originalName;
              const name = row.querySelector('input[name="field_name[]"]').value;
              const type = row.querySelector('select[name="field_type[]"]').value;
              fields.push({ original, name, type });
          });

          const payload = {
              token: token.value,
              collection: tableNameInput.value,
              fields: fields
          };

          await axios.post("/{{@SITE.uri_backend}}/database/collections?update-fields", payload, {
              headers: {
                  "Content-Type": "application/json"
              }
          }).then(response => {
              if (response.data.status === "success") {
                  alert(response.data.message);
                  window.location.reload();
              } else {
                  showAlert("error", response.data.message);
              }
          }).catch(() => {
              showAlert("error", "Error updating fields.");
          });
      });
  }

  // Add new field dynamically
  document.getElementById('addNewField').addEventListener('click', () => {
      const container = document.getElementById('fieldsContainer');
      const fieldHTML = `
    <div class="field-row" data-original-name="">
      <input type="text" name="field_name[]" placeholder="Field name" required />
      <select name="field_type[]">
        <option value="TEXT">TEXT</option>
        <option value="INTEGER">INTEGER</option>
      </select>
      <button type="button" class="btn-remove-field">Remove</button>
    </div>`;
      container.insertAdjacentHTML('beforeend', fieldHTML);
  });

  document.getElementById('renameForm').addEventListener('submit', async function(e) {
      e.preventDefault();
      const newTableName = document.getElementById('newTableName').value;
      const payload = {
          token: token.value,
          old_table_name: tableNameInput.value,
          new_table_name: newTableName
      };
      await axios.post("/{{@SITE.uri_backend}}/database/collections?rename-table", payload, {
          headers: {
              "Content-Type": "application/json"
          }
      }).then(response => {
          if(response.data.status === "success") {
              alert(response.data.message);
              window.location.href = "/{{@SITE.uri_backend}}/database/collections?view=" + newTableName;
          } else {
              showAlert("error", response.data.message);
          }
      }).catch(() => {
          showAlert("error", "Error renaming table.");
      });
  });

  document.getElementById('confirmDeleteBtn').addEventListener('click', async function() {
      if (window.confirm("Are you sure you want to delete this collection? This action cannot be undone.")) {
          const payload = {
              token: token.value,
              collection: tableNameInput.value
          };
          await axios.post("/{{@SITE.uri_backend}}/database/collections?delete-table", payload, {
              headers: { "Content-Type": "application/json" }
          }).then(response => {
              if(response.data.status === "success") {
                  alert(response.data.message);
                  window.location.href = "/{{@SITE.uri_backend}}/database";
              } else {
                  showAlert("error", response.data.message);
              }
          }).catch(() => {
              showAlert("error", "Error deleting table.");
          });
      }
  });

  // Import form submission
  const importForm = document.getElementById('importForm');
  if (importForm) {
      importForm.addEventListener('submit', function(e) {
          e.preventDefault();

          // Check if file is selected
          const fileInput = document.getElementById('import_file');
          if (!fileInput.files || fileInput.files.length === 0) {
              alert('Please select a file to import.');
              return false;
          }

          // Check file type
          const file = fileInput.files[0];
          if (file.type !== 'application/json' && !file.name.endsWith('.json')) {
              alert('Please select a valid JSON file.');
              return false;
          }

          // Confirm import
          const importStrategy = document.querySelector('input[name="import_strategy"]:checked').value;
          let confirmMessage = 'Are you sure you want to import this data?';

          if (importStrategy === 'replace') {
              confirmMessage = 'WARNING: This will replace the existing collection with the imported data. All current data will be lost. Do you want to continue?';
          }

          if (!confirm(confirmMessage)) {
              return false;
          }

          // Create FormData object
          const formData = new FormData(importForm);
          formData.append('collection', document.getElementById('tbl_name').value);

          // Send import request
          importCollection(formData);
      });
  }

  // Function to send import request
  async function importCollection(formData) {
      try {
          const response = await fetch('/{{@SITE.uri_backend}}/database/collections?import-collection', {
              method: 'POST',
              body: formData
          });

          const data = await response.json();

          if (data.status === 'success') {
              alert(data.message);
              window.location.reload();
          } else {
              alert('Error: ' + data.message);
          }
      } catch (error) {
          alert('Error importing collection. Please try again later.');
          console.error('Import error:', error);
      }
  }

</script>
